# Secure Frontend Dockerfile
FROM node:18-alpine AS builder

# Security updates
RUN apk update && apk upgrade && apk add --no-cache \
    curl \
    && rm -rf /var/cache/apk/*

# Create non-root user
RUN addgroup -g 1001 -S nodejs && adduser -S nextjs -u 1001

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci --only=production && npm cache clean --force

# Copy source code
COPY . .

# Build the app
RUN npm run build

# Production stage with nginx
FROM nginx:alpine

# Security updates
RUN apk update && apk upgrade && apk add --no-cache \
    curl \
    && rm -rf /var/cache/apk/*

# Create non-root user for nginx
RUN addgroup -g 1001 -S nginx-app && adduser -S nginx-app -u 1001 -G nginx-app

# Copy custom nginx configuration
COPY nginx.conf.secure /etc/nginx/conf.d/default.conf

# Copy built application
COPY --from=builder --chown=nginx-app:nginx-app /app/build /usr/share/nginx/html

# Set proper permissions
RUN chown -R nginx-app:nginx-app /usr/share/nginx/html \
    && chmod -R 755 /usr/share/nginx/html

# Create nginx directories with proper permissions
RUN mkdir -p /var/cache/nginx/client_temp \
    && mkdir -p /var/cache/nginx/proxy_temp \
    && mkdir -p /var/cache/nginx/fastcgi_temp \
    && chown -R nginx-app:nginx-app /var/cache/nginx \
    && chmod -R 755 /var/cache/nginx

RUN touch /var/run/nginx.pid \
    && chown nginx-app:nginx-app /var/run/nginx.pid

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost/ || exit 1

# Switch to non-root user
USER nginx-app

EXPOSE 80

# Start nginx
CMD ["nginx", "-g", "daemon off;"]