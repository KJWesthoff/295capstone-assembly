version: '3.8'

services:
  # Frontend React App with security headers
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile.secure
    container_name: ventiapi-frontend-secure
    ports:
      - "3000:80"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - NODE_ENV=production
    networks:
      - scanner-network
    depends_on:
      - web-api
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID  
      - SETUID
    read_only: true
    tmpfs:
      - /tmp
      - /var/cache/nginx
      - /var/run

  # Secure Web API Backend
  web-api:
    build: 
      context: ./scanner-service/web-api
      dockerfile: Dockerfile.secure
    container_name: ventiapi-web-api-secure
    ports:
      - "8000:8000"
    volumes:
      - shared-results:/shared/results:rw
      - shared-specs:/shared/specs:rw
      # More secure Docker socket access (read-only)
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - scanner-network
    environment:
      - PYTHONUNBUFFERED=1
      - JWT_SECRET=${JWT_SECRET}
      - ENVIRONMENT=production
      - MAX_CONCURRENT_SCANS=3
      - RATE_LIMIT_ENABLED=true
    depends_on:
      - redis
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_RAW  # For network scanning only
    ulimits:
      nofile:
        soft: 1024
        hard: 2048
      nproc: 512
    mem_limit: 2g
    cpus: 1.0

  # Secure Redis with authentication
  redis:
    image: redis:7-alpine
    container_name: ventiapi-redis-secure
    ports:
      - "127.0.0.1:6379:6379"  # Bind to localhost only
    networks:
      - scanner-network
    volumes:
      - redis-data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - SETGID
      - SETUID
    user: "999:999"  # Run as redis user
    mem_limit: 512m
    cpus: 0.5

  # Scanner service with maximum security restrictions
  scanner:
    build: 
      context: ./external-scanner/ventiapi-scanner
      dockerfile: Dockerfile.secure
    image: ventiapi-scanner:secure
    container_name: ventiapi-scanner-builder-secure
    volumes:
      - shared-results:/shared/results
      - shared-specs:/shared/specs
    networks:
      - scanner-isolated  # Isolated network for scanners
    environment:
      - PYTHONUNBUFFERED=1
      - SCANNER_MODE=secure
    command: ["echo", "Secure scanner image built"]
    profiles: ["build-only"]
    security_opt:
      - no-new-privileges:true
      - seccomp:unconfined  # May be needed for network scanning
    cap_drop:
      - ALL
    cap_add:
      - NET_RAW
      - NET_ADMIN  # For network scanning
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    user: "1000:1000"
    mem_limit: 512m
    cpus: 0.5

  # Security monitoring (optional)
  fail2ban:
    image: crazymax/fail2ban:latest
    container_name: ventiapi-fail2ban
    network_mode: "host"
    cap_add:
      - NET_ADMIN
      - NET_RAW
    volumes:
      - fail2ban-data:/data
      - /var/log:/var/log:ro
    environment:
      - TZ=UTC
      - F2B_LOG_LEVEL=INFO
      - F2B_DB_PURGE_AGE=1d
    restart: unless-stopped
    profiles: ["monitoring"]

volumes:
  shared-results:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs
      o: size=1g,uid=1000,gid=1000,mode=0700
  shared-specs:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs  
      o: size=100m,uid=1000,gid=1000,mode=0700
  redis-data:
    driver: local
  fail2ban-data:
    driver: local

networks:
  scanner-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: scanner-br0
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/24
          gateway: 172.20.0.1
  
  # Isolated network for scanner containers
  scanner-isolated:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: scanner-isolated
      com.docker.network.bridge.enable_ip_masquerade: "false"
    internal: true  # No external access
    ipam:
      driver: default
      config:
        - subnet: 172.21.0.0/24