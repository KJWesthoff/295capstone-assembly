# Railway-optimized single web service
FROM python:3.11-slim

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    redis-server \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies for web API
COPY scanner-service/web-api/requirements.txt ./
RUN pip install --no-cache-dir -r requirements.txt

# Copy web API code (including plugin system)
COPY scanner-service/web-api/ ./

# Create scanner manifest directory
RUN mkdir -p /app/scanner-manifests

# Copy scanner code
COPY external-scanner/ventiapi-scanner/ /app/scanner/
RUN pip install -e /app/scanner/

# Build frontend in separate stage
FROM node:18-alpine as frontend-build
WORKDIR /app/frontend
COPY frontend/package*.json ./
RUN npm ci --only=production
COPY frontend/ ./
RUN npm run build

# Back to main stage
FROM python:3.11-slim
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    redis-server \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies
COPY scanner-service/web-api/requirements.txt ./
RUN pip install --no-cache-dir -r requirements.txt

# Copy web API code
COPY scanner-service/web-api/ ./

# Copy scanner code
COPY external-scanner/ventiapi-scanner/ /app/scanner/
RUN pip install -e /app/scanner/

# Copy built frontend
COPY --from=frontend-build /app/frontend/build ./static

# Create shared directories
RUN mkdir -p /shared/results /shared/specs

# Set environment variables
ENV PYTHONPATH="/app/scanner:/app"
ENV PYTHONUNBUFFERED=1

# Create simple web startup script
RUN echo '#!/bin/bash\n\
redis-server --daemonize yes --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru\n\
sleep 2\n\
exec python -m uvicorn main:app --host 0.0.0.0 --port ${PORT:-8000}' > /app/start.sh && \
    chmod +x /app/start.sh

# Expose port
EXPOSE 8000

# Start the web application
CMD ["/app/start.sh"]