/**
 * Ingest OWASP Top 10 2021 data into PostgreSQL with embeddings
 * 
 * This script:
 * 1. Reads the owasp.jsonl file generated by data/ingest_owasp.py
 * 2. Generates embeddings for each OWASP entry using Mistral
 * 3. Inserts into the owasp_top10 table
 */

import { readFileSync } from 'fs';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';
import { Client } from 'pg';
import { mistral } from '@ai-sdk/mistral';
import { embedMany } from 'ai';

// ES module compatibility
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

interface OwaspRecord {
  source: string;
  id: string;
  title: string;
  description: string;
  url: string;
  related_cwes: string[];
}

interface OwaspEntry {
  owasp_id: string;
  category: string;
  description: string;
  related_cwes: string[];
  url: string;
  year: number;
}

/**
 * Load and parse the OWASP JSONL file
 */
function loadOwaspData(filePath: string): OwaspRecord[] {
  const content = readFileSync(filePath, 'utf-8');
  const lines = content.trim().split('\n');
  return lines.map(line => JSON.parse(line));
}

/**
 * Parse OWASP record into database entry
 */
function parseOwaspEntry(record: OwaspRecord): OwaspEntry {
  // Extract year from ID (e.g., "A01:2021" -> 2021)
  const yearMatch = record.id.match(/:(\d{4})$/);
  const year = yearMatch ? parseInt(yearMatch[1]) : 2021;
  
  return {
    owasp_id: record.id,
    category: record.title,
    description: record.description,
    related_cwes: record.related_cwes || [],
    url: record.url,
    year,
  };
}

/**
 * Generate embedding text for an OWASP entry
 * 
 * Focuses on the category name and key excerpts from description
 * to create a focused embedding for semantic search.
 */
function generateEmbeddingText(entry: OwaspEntry): string {
  // Truncate description to focus on key information
  const maxDescLength = 2000;
  const truncatedDesc = entry.description.length > maxDescLength
    ? entry.description.substring(0, maxDescLength) + '...'
    : entry.description;
  
  // List CWEs for context
  const cweList = entry.related_cwes.length > 0
    ? `\n\nRelated CWEs: ${entry.related_cwes.slice(0, 20).join(', ')}${entry.related_cwes.length > 20 ? '...' : ''}`
    : '';
  
  return `
OWASP ${entry.owasp_id}: ${entry.category}

${truncatedDesc}${cweList}
`.trim();
}

/**
 * Generate embeddings for OWASP entries in batches
 */
async function generateEmbeddings(entries: OwaspEntry[]): Promise<number[][]> {
  console.log(`\n🤖 Generating embeddings for ${entries.length} OWASP entries using Mistral...`);
  
  const texts = entries.map(generateEmbeddingText);
  
  // Process all at once since we only have 10 entries
  const { embeddings } = await embedMany({
    model: mistral.embedding('mistral-embed'),
    values: texts,
  });
  
  console.log(`✅ Generated ${embeddings.length} embeddings (${embeddings[0]?.length || 1024} dimensions each)`);
  return embeddings;
}

/**
 * Insert OWASP entries into PostgreSQL
 */
async function insertOwaspEntries(
  client: Client,
  entries: OwaspEntry[],
  embeddings: number[][]
): Promise<void> {
  console.log(`\n📥 Inserting ${entries.length} OWASP entries into database...`);
  
  const insertQuery = `
    INSERT INTO owasp_top10 (
      owasp_id,
      category,
      description,
      related_cwes,
      url,
      year,
      vector_embedding
    ) VALUES ($1, $2, $3, $4, $5, $6, $7)
    ON CONFLICT (owasp_id) DO UPDATE SET
      category = EXCLUDED.category,
      description = EXCLUDED.description,
      related_cwes = EXCLUDED.related_cwes,
      url = EXCLUDED.url,
      year = EXCLUDED.year,
      vector_embedding = EXCLUDED.vector_embedding
  `;
  
  let inserted = 0;
  let updated = 0;
  
  for (let i = 0; i < entries.length; i++) {
    const entry = entries[i];
    const embedding = embeddings[i];
    
    try {
      const result = await client.query(insertQuery, [
        entry.owasp_id,
        entry.category,
        entry.description,
        entry.related_cwes,
        entry.url,
        entry.year,
        `[${embedding.join(',')}]`, // Convert array to vector format
      ]);
      
      if (result.rowCount === 1) {
        inserted++;
      } else {
        updated++;
      }
      
      console.log(`  ✓ Processed ${entry.owasp_id}: ${entry.category} (${entry.related_cwes.length} CWEs)`);
    } catch (error) {
      console.error(`❌ Error inserting ${entry.owasp_id}:`, error);
      throw error;
    }
  }
  
  console.log(`✅ Inserted ${inserted} new entries, updated ${updated} existing entries`);
}

/**
 * Main ingestion function
 */
async function main() {
  console.log('🚀 Starting OWASP Top 10 2021 ingestion...\n');
  
  // Validate environment
  if (!process.env.DATABASE_URL) {
    throw new Error('DATABASE_URL environment variable is required');
  }
  
  if (!process.env.MISTRAL_API_KEY) {
    throw new Error('MISTRAL_API_KEY environment variable is required');
  }
  
  // Connect to database
  const client = new Client({
    connectionString: process.env.DATABASE_URL,
    ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,
  });
  
  try {
    console.log('🔌 Connecting to PostgreSQL...');
    await client.connect();
    console.log('✅ Connected to database\n');
    
    // Load OWASP data
    const dataPath = join(__dirname, '..', 'data', 'raw', 'owasp.jsonl');
    console.log(`📖 Loading OWASP data from ${dataPath}...`);
    const records = loadOwaspData(dataPath);
    console.log(`✅ Loaded ${records.length} OWASP records\n`);
    
    // Parse into structured entries
    console.log('📝 Parsing OWASP entries...');
    const entries = records.map(parseOwaspEntry);
    console.log(`✅ Parsed ${entries.length} entries\n`);
    
    // Log CWE mapping statistics
    const totalCwes = entries.reduce((sum, entry) => sum + entry.related_cwes.length, 0);
    const avgCwes = totalCwes / entries.length;
    console.log(`📊 CWE Mapping Statistics:`);
    console.log(`   Total CWEs across all OWASP categories: ${totalCwes}`);
    console.log(`   Average CWEs per category: ${avgCwes.toFixed(1)}`);
    
    // Show per-entry breakdown
    entries.forEach(entry => {
      console.log(`   • ${entry.owasp_id}: ${entry.related_cwes.length} CWEs`);
    });
    console.log();
    
    // Generate embeddings
    const embeddings = await generateEmbeddings(entries);
    
    // Insert into database
    await insertOwaspEntries(client, entries, embeddings);
    
    console.log('\n🎉 OWASP ingestion complete!');
    console.log('\n📊 Summary:');
    console.log(`   Total OWASP entries: ${entries.length}`);
    console.log(`   Total CWE mappings: ${totalCwes}`);
    console.log(`   Total embeddings: ${embeddings.length}`);
    console.log(`   Embedding dimensions: ${embeddings[0]?.length || 0}`);
    console.log(`   Database table: owasp_top10`);
    
  } catch (error) {
    console.error('\n❌ Error during ingestion:', error);
    throw error;
  } finally {
    await client.end();
    console.log('\n🔌 Database connection closed');
  }
}

export { main as ingestOwasp };

// Run if called directly (ES module compatible)
main().catch(error => {
  console.error('Fatal error:', error);
  process.exit(1);
});

